/*
 * Company: MDA VST
 * Effect Name: MDA Electric Piano
 * Description: A port of the famous MDA ePiano VST
 *
 * This file was auto-generated by Aviate Audio Effect Creator for the Multiverse.
 */
#pragma once

#include <Audio.h>
#include <arm_math.h>
#include "Aviate/AudioEffectWrapper.h"

//!s - START_USER_INCLUDES - put your #includes below this line before the matching END
class mdaEPiano; // forward declare
//!e - END_USER_INCLUDES

namespace MDAVST_MDAElecPiano {

//!s - START_USER_EFFECT_TYPES - put your effect types below this line before the matching END
//!e - END_USER_EFFECT_TYPES

#define AUDIOSTREAM_INT16
using AudioBlock    = audio_block_t;
using AudioDataType = int16_t;
#define audioBlockReceiveReadOnly receiveReadOnly
#define audioBlockReceiveWritable receiveWritable
#define audioBlockAllocate        allocate

class MDAElecPiano : public AudioStream, public Aviate::AudioEffectWrapper {
public:
    static constexpr unsigned NUM_INPUTS  = 1;
    static constexpr unsigned NUM_OUTPUTS = 2;

    // List of effect control names
    enum {
        Bypass_e = 0,
        Volume_e = 1,
        Program_e = 2,
        EnvelopeDecay_e = 3,
        EnvelopeRelease_e = 4,
        Width_e = 5,
        VelocitySensitivity_e = 6,
        Treble_e = 7,
        Polyphony_e = 8,
        Tune_e = 9,
        Detune_e = 10,
        Overdrive_e = 11,
        PanTremolo_e = 12,
        PanLFO_e = 13,
        NUM_CONTROLS
    };

    //!s - START_USER_CLASS_TYPES - put your custom class types below this line before the matching END
    //!e - END_USER_CLASS_TYPES

    MDAElecPiano();

    //!s - START_USER_CONSTRUCTORS - put your custom constructors below this line before the matching END
    //!e - END_USER_CONSTRUCTORS

    virtual ~MDAElecPiano();

    // Standard EFX interface functions - do not change these declaration
    virtual void update(); // main audio processing loop function
    void mapMidiControl(int parameter, int midiCC, int midiChannel = 0) override;
    void processMidi(int status, int data1, int data2) override;
    void setParam(int paramIndex, float paramValue) override;
    float getUserParamValue(int paramIndex, float normalizedParamValue);
    const char* getName() override;
    const uint8_t* getRblk() override;

    // control value set functions, must take floats between 0.0f and 1.0f - do not change these declarations
    void volume(float value) override;
    void program(float value);
    void envelopedecay(float value);
    void enveloperelease(float value);
    void width(float value);
    void velocitysensitivity(float value);
    void treble(float value);
    void polyphony(float value);
    void tune(float value);
    void detune(float value);
    void overdrive(float value);
    void pantremolo(float value);
    void panlfo(float value);

    //!s - START_USER_PUBLIC_MEMBERS - put your public members below this line before the matching END
    //!e - END_USER_PUBLIC_MEMBERS

private:
    audio_block_t *m_inputQueueArray[1]; // required by AudioStream base class, array size is num inputs
    int m_midiConfig[NUM_CONTROLS][2]; // stores the midi parameter mapping

    // m_bypass and m_volume are already provided by the base class AudioEffectWrapper or AudioEffectFloat
    float m_program = 0.0f;
    float m_envelopedecay = 0.0f;
    float m_enveloperelease = 0.0f;
    float m_width = 0.0f;
    float m_velocitysensitivity = 0.0f;
    float m_treble = 0.0f;
    float m_polyphony = 0.0f;
    float m_tune = 0.0f;
    float m_detune = 0.0f;
    float m_overdrive = 0.0f;
    float m_pantremolo = 0.0f;
    float m_panlfo = 0.0f;

    audio_block_t* m_basicInputCheck(audio_block_t* inputAudioBlock, unsigned outputChannel);

    //!s - START_USER_PRIVATE_MEMBERS - put your private members below this line before the matching END
    mdaEPiano* m_piano = nullptr;

    void m_init();
    bool m_isInit = false;
    //!e - END_USER_PRIVATE_MEMBERS

};

}
