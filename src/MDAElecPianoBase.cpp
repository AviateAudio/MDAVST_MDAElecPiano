/*
 * Company: MDA VST
 * Effect Name: MDA Electric Piano
 * Description: A port of the famous MDA ePiano VST
 *
 * This file was auto-generated by Aviate Audio Effect Creator for the Multiverse.
 */
#include <cmath>
#include "Aviate/LibBasicFunctions.h"
#include "MDAElecPiano.h"

using namespace Aviate;

namespace MDAVST_MDAElecPiano {

void MDAElecPiano::mapMidiControl(int parameter, int midiCC, int midiChannel)
{
    if (parameter >= NUM_CONTROLS) {
        return ; // Invalid midi parameter
    }
    m_midiConfig[parameter][MIDI_CHANNEL] = midiChannel;
    m_midiConfig[parameter][MIDI_CONTROL] = midiCC;
}

void MDAElecPiano::setParam(int paramIndex, float paramValue)
{
    switch(paramIndex) {
    case 0 : bypass( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 1 : volume( (paramValue - 0.000000) / (10.000000 - 0.000000) ); break;
    case 2 : mode( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 3 : program( (paramValue - 0.000000) / (4.000000 - 0.000000) ); break;
    case 4 : envelopedecay( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 5 : enveloperelease( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 6 : hardness( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 7 : treble( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 8 : pantremolo( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 9 : panlfo( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 10 : velocitysensitivity( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 11 : width( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 12 : polyphony( (paramValue - 1.000000) / (16.000000 - 1.000000) ); break;
    case 13 : tune( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 14 : detune( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 15 : overdrive( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    default : break;
    }
}

float MDAElecPiano::getUserParamValue(int paramIndex, float normalizedParamValue)
{
    switch(paramIndex) {
    case 0 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // bypass
    case 1 : return ( ((10.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // volume
    case 2 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // mode
    case 3 : return ( ((4.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // program
    case 4 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // envelopedecay
    case 5 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // enveloperelease
    case 6 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // hardness
    case 7 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // treble
    case 8 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // pantremolo
    case 9 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // panlfo
    case 10 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // velocitysensitivity
    case 11 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // width
    case 12 : return ( ((16.000000 - 1.000000) * normalizedParamValue) + 1.000000 ); // polyphony
    case 13 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // tune
    case 14 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // detune
    case 15 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // overdrive
    default : return 0.0f;
    }
}


bool MDAElecPiano::m_enableAndBypassCheck(unsigned numOutputs)
{
    // check if effect is disabled
    if (m_enable == false) {
        // do not transmit or process any audio, return as quickly as possible
        return false;
    }  // end of enable check

    // check if effect is in bypass
    if (m_bypass == true) {
        // no inputs so tranmit silence (zeros)
        AudioBlock* outputs[numOutputs];
        for (unsigned ch = 0; ch < numOutputs; ch++) {
            outputs[ch] = audioBlockAllocate();
            if (outputs[ch]) {
                clearAudioBlock(outputs[ch]);  // from libBasicFunctions.h
                AudioStream::transmit(outputs[ch], ch);  // tranmit on channel 'ch'
                AudioStream::release(outputs[ch]);  // release the audio block
            }
        }
        return false;  // indicate to caller no further processing due to bypass mode
    } else {
        return true;  // indicate to caller to continue normal processing
    }
}

const uint8_t rblk[256] = TEENSY_AUDIO_BLOCK;
const uint8_t* MDAElecPiano::getRblk() { return rblk; }
static constexpr char PROGMEM MDAElecPiano_name[] = {0x4d, 0x44, 0x41, 0x20, 0x56, 0x53, 0x54, 0x3a, 0x4d, 0x44, 0x41, 0x20, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x20, 0x50, 0x69, 0x61, 0x6e, 0x6f, 0x0};
const char* MDAElecPiano::getName() { return MDAElecPiano_name; }

}
